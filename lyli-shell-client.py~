#!/usr/bin/python

# A command-line interface for shortening links with LyLi.fi
# by Praash (ie)
# https://github.com/praashie/lyli-shell-client

# LyLi.fi by Felix Bade:
# http://lyli.fi
# https://github.com/felixbade/lyli

import sys;
import json;
import subprocess;

import pyperclip;
import pynotify;

import httplib;
from urlparse import urlparse;

shortcutMode = False;
verboseOutput = False;

def printHelp():
	print("lyli.py - interface for shortening links via lyli.fi");
	print("Usage:\tlyli.py [options] URL [NAME]");
	print("\tURL\t- url to shorten");
	print("\tNAME\t- optional name, replaced by letters if omitted");
	print("Options: ");
	print("\t-v -verbose\t- Give verbose output");
	print("\t-s --shortcut\t- Shortcut mode: Read URL from OS clipboard and copy the shortlink back in.");
	print("\t\t\t\tUseful for shortening links with a properly bound keyboard shortcut.")
	print("Resulting shortlinks will be in the form of http://lyli.fi/NAME");

def message(string):
	global shortcutMode;
	print(string);
	if shortcutMode:
		pynotify.Notification("Lyli", string).show();


# From Corey Goldberg
# http://stackoverflow.com/questions/6471275/
def checkUrl(url):
	
	try:
		p = urlparse(url)
		conn = httplib.HTTPConnection(p.netloc)
		conn.request('HEAD', p.path)
		resp = conn.getresponse()
	except:
		return False;
	return resp.status < 400

def shorten(longURL, shortName=''):	
	apiParams = [];

	apiParams.append( ('url', longURL) );
	
	if shortName != '':
		apiParams.append( ('name', shortName) );

	apiParamsJson = json.dumps(dict(apiParams));

	command = "curl --silent -H 'Content-Type: application/json' -X POST -d '" + apiParamsJson + "' api.lyli.fi";


	if verboseOutput:
		message("Sending POST request:");
		message("Executing: " + str(command));

	try:
		#output = str(subprocess.check_output(command));
		output = str(subprocess.check_output(command, shell=True));
	except subprocess.CalledProcessError as err:
		message("Error in curl/api.lyli.fi: POST query failed");
		return 2;

	if verboseOutput:
		message("Output from api.lyli.fi:");
		message(output);

	try:
		outJSON = json.loads(output);
	except:
		message("Error: output can't be parsed");
		
		return 2;

	if "error" in outJSON:
		message("Error in Lyli: " + outJSON["error"]);
		return 2;
	elif not "short-url" in outJSON:
		message("Strange Error: api.lyli.fi returned no error, but no shortlink seems to have been made");
		return 2;
	elif "short-url" in outJSON:
		message("Shortlink: " + outJSON["short-url"] + " copied to clipboard");
		pyperclip.copy(outJSON["short-url"]);
		return 0;

def main():
	global shortcutMode, verboseOutput;

	pynotify.init("Lyli CLI");

	args = [];

	showHelp = False;

	longURL = '';
	shortName = '';

	for arg in sys.argv[1:]:
		if arg == '-v' or arg == '--verbose':
			verboseOutput = True;
		elif arg == '-h' or arg == '--help':
			showHelp = True;
			break;
		elif arg == '-s' or arg == '--shortcut':
			shortcutMode = True;
		else:
			args.append(arg);

	if shortcutMode == True:
		longURL = pyperclip.paste();
	elif len(args) < 1 or len(args) > 2:
		message("Error: Invalid arguments");
		showHelp = True;
	else:
		longURL = args[0];
		if len(args) > 1:
			shortName = args[1];

	if showHelp:
		printHelp();
		sys.exit(1);

	#Add a proper http scheme if the given url does not supply a scheme
	if longURL.find("://") < 0:
		longURL = "http://" + longURL;

	if not checkUrl(longURL):
		message("Error: Page does not exist");
		return 1;

	exitStatus = shorten(longURL, shortName);
	sys.exit(exitStatus);


if __name__ == "__main__":
	main();
